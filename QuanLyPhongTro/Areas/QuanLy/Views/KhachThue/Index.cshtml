<div id="tenants-section" class="section hidden">
    <div class="bg-white rounded-xl shadow-sm border border-gray-100">
        <div class="p-6 border-b border-gray-200">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                <h3 class="text-lg font-semibold text-gray-800">Danh sách khách thuê</h3>
                <div class="flex flex-col sm:flex-row gap-3">

                    <input type="text" id="khachThueSearchInput" placeholder="Tìm kiếm theo Tên hoặc CCCD..." class="form-input px-4 py-2 rounded-lg focus:outline-none">

                    <button onclick="openModal('tenantModal')" class="btn-primary text-white px-4 py-2 rounded-lg flex items-center">
                        <i class="fas fa-plus mr-2"></i>Thêm khách
                    </button>
                </div>
            </div>
        </div>

        <div class="overflow-x-auto">
            <table class="w-full">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Họ tên</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Số điện thoại</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Địa chỉ</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tên phòng</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Địa chỉ phòng</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ngày bắt đầu</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ngày kết thúc</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Thao tác</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @if (ViewBag.KhachThueList != null && ViewBag.KhachThueList.Count > 0)
                    {
                        @foreach (var khach in ViewBag.KhachThueList)
                        {
                            <tr class="table-row">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        <img src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='32' height='32' viewBox='0 0 32 32'%3E%3Ccircle cx='16' cy='16' r='16' fill='%234F46E5'/%3E%3Ctext x='16' y='21' text-anchor='middle' fill='white' font-family='Arial' font-size='12' font-weight='bold'%3ENA%3C/text%3E%3C/svg%3E" alt="Avatar" class="w-8 h-8 rounded-full mr-3">
                                        <div>
                                            <div class="text-sm font-medium text-gray-900">@khach.HoTen</div>
                                            <div class="text-sm text-gray-500">Khách thuê chính</div>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@khach.SoDienThoai</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@khach.DiaChi</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@khach.TenPhong</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@khach.DiaChiPhong</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@khach.NgayBatDau</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@khach.NgayKetThuc</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                    <button onclick="viewTenant('@khach.MaKhach')" class="text-green-600 hover:text-green-900 mr-3">
                                        <i class="fas fa-eye mr-1"></i>Xem
                                    </button>
                                    <button onclick="editTenant('@khach.MaKhach')" class="text-blue-600 hover:text-blue-900 mr-3">
                                        <i class="fas fa-edit mr-1"></i>Sửa
                                    </button>
                                    <button onclick="deleteTenant('@khach.MaKhach')" class="text-red-600 hover:text-red-900">
                                        <i class="fas fa-trash mr-1"></i>Xóa
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="8" class="text-center py-4 text-gray-500">Không có dữ liệu khách thuê.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@await Html.PartialAsync("~/Areas/QuanLy/Views/KhachThue/Seen.cshtml")
@await Html.PartialAsync("~/Areas/QuanLy/Views/KhachThue/Create.cshtml", new QuanLyPhongTro.Models.KhachThue())
@await Html.PartialAsync("~/Areas/QuanLy/Views/KhachThue/Edit.cshtml", new QuanLyPhongTro.Models.KhachThue())


<script>
    // === HÀM TRỢ GIÚP MỞ/ĐÓNG MODAL ===
    function openModal(modalId) {
        document.getElementById(modalId).classList.remove('hidden');
    }

    function closeModal(modalId) {
        document.getElementById(modalId).classList.add('hidden');
        const errorMsg = document.getElementById(modalId.replace('Modal', '-error-message'));
        if (errorMsg) {
            errorMsg.classList.add('hidden');
            errorMsg.innerHTML = "";
        }
    }

    document.querySelectorAll('.modal').forEach(modal => {
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeModal(modal.id);
            }
        });
    });

    // ============ HÀM TẢI LẠI BẢNG (ĐÃ SỬA) ============
    async function reloadTenantSection() {
        try {
            // Lấy giá trị tìm kiếm
            const searchInput = document.getElementById('khachThueSearchInput');
            const searchValue = searchInput ? searchInput.value : ""; // Lấy value, nếu input chưa kịp render thì là chuỗi rỗng

            // Gửi yêu cầu fetch với tham số searchString
            const response = await fetch(`/QuanLy/KhachThue/ReloadKhachThueList?searchString=${encodeURIComponent(searchValue)}`);
            const html = await response.text();

            const oldSection = document.getElementById('tenants-section');
            if (oldSection) {
                oldSection.outerHTML = html;
            } else {
                location.reload();
                return;
            }

            const newSection = document.getElementById('tenants-section');
            if (newSection) {
                newSection.classList.remove('hidden');
            }

            // 3. Quan trọng: Gắn lại event listener cho ô search MỚI
            setupTenantSearch();

        } catch (error) {
            console.error('Lỗi khi tải lại danh sách:', error);
            location.reload();
        }
    }

    // ============ 2. HÀM MỚI ĐỂ XỬ LÝ GÕ TÌM KIẾM ============
    function setupTenantSearch() {
        const searchInput = document.getElementById('khachThueSearchInput');
        if (!searchInput) return; // Nếu không tìm thấy input thì thoát

        searchInput.addEventListener('keyup', function () {
            // Hủy các yêu cầu trước (debounce)
            clearTimeout(window.searchTenantTimeout);

            // Đặt hẹn giờ 500ms, sau 500ms không gõ nữa thì mới bắt đầu tìm
            window.searchTenantTimeout = setTimeout(() => {
                reloadTenantSection();
            }, 1000);
        });
    }

    // === GỌI HÀM TÌM KIẾM LẦN ĐẦU KHI TRANG TẢI ===
    document.addEventListener('DOMContentLoaded', setupTenantSearch);


    // === HÀM XỬ LÝ "THÊM KHÁCH THUÊ" ===
    async function handleCreateTenant(event) {
        event.preventDefault();
        const form = event.target;
        const formData = new FormData(form);
        const errorDiv = document.getElementById('create-error-message');
        const token = form.querySelector('input[name="__RequestVerificationToken"]').value;

        try {
            const response = await fetch("/QuanLy/KhachThue/Create", {
                method: "POST",
                body: formData,
                headers: { "RequestVerificationToken": token }
            });
            const result = await response.json();
            if (result.success) {
                closeModal('tenantModal');
                alert(result.message);
                await reloadTenantSection();
            } else {
                let errorHtml = `<strong>Lỗi:</strong> ${result.message}`;
                if (result.errors) {
                    errorHtml += "<ul>" + result.errors.map(e => `<li>${e}</li>`).join('') + "</ul>";
                }
                errorDiv.innerHTML = errorHtml;
                errorDiv.classList.remove('hidden');
            }
        } catch (error) {
            console.error('❌ Lỗi khi gửi Create:', error);
            errorDiv.innerHTML = "Không thể kết nối tới máy chủ.";
            errorDiv.classList.remove('hidden');
        }
    }


    // === HÀM XỬ LÝ "XEM CHI TIẾT" ===
    async function viewTenant(id) {
        // (Giữ nguyên code của bạn)
        const modalId = 'viewTenantModal';
        const detailsDiv = document.getElementById('viewTenantDetails');
        detailsDiv.innerHTML = '<p class="text-center text-gray-500">Đang tải dữ liệu...</p>';
        openModal(modalId);
        try {
            const response = await fetch(`/QuanLy/KhachThue/Details/${id}`);
            const result = await response.json();
            if (result.success) {
                const data = result.data;
                detailsDiv.innerHTML = `
                        <div class="grid grid-cols-2 gap-x-4 gap-y-2">
                            <strong class="text-gray-500">Họ tên:</strong>
                            <span class="text-gray-900">${data.hoTen}</span>
                            <strong class="text-gray-500">CCCD:</strong>
                            <span class="text-gray-900">${data.cccd}</span>
                            <strong class="text-gray-500">Ngày sinh:</strong>
                            <span class="text-gray-900">${data.ngaySinh}</span>
                            <strong class="text-gray-500">Số điện thoại:</strong>
                            <span class="text-gray-900">${data.soDienThoai}</span>
                            <strong class="text-gray-500">Địa chỉ:</strong>
                            <span class="text-gray-900">${data.diaChi}</span>
                            <hr class="col-span-2 my-2"/>
                            <strong class="text-gray-500">Tên phòng:</strong>
                            <span class="text-gray-900">${data.tenPhong}</span>
                            <strong class="text-gray-500">Địa chỉ phòng:</strong>
                            <span class="text-gray-900">${data.diaChiPhong}</span>
                            <strong class="text-gray-500">Ngày vào:</strong>
                            <span class="text-gray-900">${data.ngayBatDau}</span>
                            <strong class="text-gray-500">Ngày kết thúc HĐ:</strong>
                            <span class="text-gray-900">${data.ngayKetThuc}</span>
                            <strong class="text-gray-500">Tiền cọc:</strong>
                            <span class="text-gray-900">${new Intl.NumberFormat('vi-VN').format(data.tienCoc)} VNĐ</span>
                        </div>`;
            } else {
                detailsDiv.innerHTML = `<p class="text-center text-red-500">${result.message}</p>`;
            }
        } catch (error) {
            detailsDiv.innerHTML = `<p class="text-center text-red-500">Không thể kết nối tới máy chủ.</p>`;
        }
    }

    // === HÀM XỬ LÝ "SỬA" (GET DATA) ===
    async function editTenant(id) {
        // (Giữ nguyên code của bạn)
        try {
            const response = await fetch(`/QuanLy/KhachThue/Edit/${id}`);
            const result = await response.json();
            if (result.success) {
                const data = result.data;
                document.getElementById('edit_MaKhach').value = data.maKhach;
                document.getElementById('edit_HoTen').value = data.hoTen;
                document.getElementById('edit_Cccd').value = data.cccd;
                document.getElementById('edit_SoDienThoai').value = data.soDienThoai;
                document.getElementById('edit_DiaChi').value = data.diaChi;
                document.getElementById('edit_NgaySinh').value = data.ngaySinh;
                openModal('editTenantModal');
            } else {
                alert("Lỗi: " + result.message);
            }
        } catch (error) {
            alert("Không thể tải dữ liệu để sửa.");
        }
    }

    // === HÀM XỬ LÝ "SỬA" (POST DATA) ===
    async function handleEditTenant(event) {
        // (Giữ nguyên code của bạn, chỉ thay location.reload)
        event.preventDefault();
        const form = event.target;
        const formData = new FormData(form);
        const errorDiv = document.getElementById('edit-error-message');
        const token = form.querySelector('input[name="__RequestVerificationToken"]').value;
        try {
            const response = await fetch("/QuanLy/KhachThue/Edit", {
                method: "POST",
                body: formData,
                headers: { "RequestVerificationToken": token }
            });
            const result = await response.json();
            if (result.success) {
                closeModal('editTenantModal');
                alert(result.message);
                await reloadTenantSection(); // <-- Đã sửa
            } else {
                let errorHtml = `<strong>Lỗi:</strong> ${result.message}`;
                if (result.errors) {
                    errorHtml += "<ul>" + result.errors.map(e => `<li>${e}</li>`).join('') + "</ul>";
                }
                errorDiv.innerHTML = errorHtml;
                errorDiv.classList.remove('hidden');
            }
        } catch (error) {
            console.error('❌ Lỗi khi gửi Edit:', error);
            errorDiv.innerHTML = "Không thể kết nối tới máy chủ.";
            errorDiv.classList.remove('hidden');
        }
    }

    // === HÀM XỬ LÝ "XÓA" ===
    async function deleteTenant(id) {
        // (Giữ nguyên code của bạn, chỉ thay location.reload)
        if (!confirm("Bạn có chắc chắn muốn xóa khách thuê này không?")) {
            return;
        }
        try {
            const token = document.querySelector('#createTenantForm input[name="__RequestVerificationToken"]').value;
            const response = await fetch(`/QuanLy/KhachThue/Delete/${id}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': token,
                    'Content-Type': 'application/json'
                }
            });
            const result = await response.json();
            if (result.success) {
                alert(result.message);
                await reloadTenantSection(); // <-- Đã sửa
            } else {
                alert("Lỗi: " + result.message);
            }
        } catch (error) {
            alert("Đã xảy ra lỗi khi thực hiện xóa.");
        }
    }
</script>