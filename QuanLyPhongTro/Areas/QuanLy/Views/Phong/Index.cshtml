@{
    ViewBag.Title = "Danh sách phòng";
}

<div id="rooms-section" class="section">
    <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold">Danh sách phòng</h3>
            <button onclick="openModal('roomModal')" class="btn-primary text-white px-4 py-2 rounded-lg flex items-center">
                <i class="fas fa-plus mr-2"></i>Thêm phòng
            </button>
        </div>

        <table class="w-full table-auto border-collapse">
            <thead class="bg-gray-50">
                <tr>
                    <th class="border px-4 py-2">Tên phòng</th>
                    <th class="border px-4 py-2">Tầng</th>
                    <th class="border px-4 py-2">Loại</th>
                    <th class="border px-4 py-2">Diện tích</th>
                    <th class="border px-4 py-2">Giá</th>
                    <th class="border px-4 py-2">Địa chỉ</th>
                    <th class="border px-4 py-2">Khách thuê</th> <!-- ✅ thêm cột mới -->
                    <th class="border px-4 py-2">Trạng thái</th>
                    <th class="border px-4 py-2">Thao tác</th>
                </tr>
            </thead>

            <tbody>
                @foreach (var p in ViewBag.PhongList)
                {
                    <tr class="border-b">
                        <td class="border px-4 py-2">@p.TenPhong</td>
                        <td class="border px-4 py-2">@p.Tang</td>
                        <td class="border px-4 py-2">@p.LoaiPhong</td>
                        <td class="border px-4 py-2">@p.DienTich m²</td>
                        <td class="border px-4 py-2">@p.GiaPhong</td>
                        <td class="border px-4 py-2">@p.DiaChi</td>
                        <td class="border px-4 py-2">@p.HoTenKhach</td> <!-- ✅ dữ liệu khách thuê -->
                        <td class="border px-4 py-2">@p.TrangThai</td>
                        <td class="border px-4 py-2">
                            <button onclick="openPhongEditModal(@p.MaPhong, this)" class="bg-yellow-500 text-white px-2 py-1 rounded">
                                Sửa
                            </button>
                            <button onclick="deletePhong(@p.MaPhong, this)" class="bg-red-500 text-white px-2 py-1 rounded">
                                Xóa
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@await Html.PartialAsync("~/Areas/QuanLy/Views/Phong/Create.cshtml")
@await Html.PartialAsync("~/Areas/QuanLy/Views/Phong/Edit.cshtml")

@*  <script>
    function openModal(id) {
        document.getElementById(id).classList.remove("hidden");
    }
    function closeModal(id) {
        document.getElementById(id).classList.add("hidden");
    }

    async function deletePhong(id) {
        if (!confirm("Bạn có chắc muốn xóa phòng này không?")) return;
        const res = await fetch(`/QuanLy/Phong/Delete?id=${id}`, { method: 'POST' });
        const result = await res.json();
        alert(result.message);
        if (result.success) location.reload();
    }
</script>  *@

 <script>
    // === HÀM MỞ/ĐÓNG MODAL ===
    function openModal(id) {
        document.getElementById(id).classList.remove("hidden");
    }
    function closeModal(id) {
        document.getElementById(id).classList.add("hidden");
    }

    // === HÀM MỚI: TẢI LẠI BẢNG PHÒNG ===
    async function reloadRoomSection() {
        try {
            // 1. Fetch lại trang Index của Phong
            const response = await fetch('/QuanLy/Phong/Index');
            const html = await response.text();

            // 2. Dùng DOMParser để phân tích HTML trả về
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');

            // 3. Lấy nội dung của #rooms-section MỚI
            const newSection = doc.getElementById('rooms-section');

            // 4. Lấy #rooms-section CŨ trên trang
            const oldSection = document.getElementById('rooms-section');

            // 5. Thay thế nội dung CŨ bằng MỚI
            if (oldSection && newSection) {
                // Chỉ thay thế nội dung bên trong để giữ nguyên div#rooms-section
                oldSection.innerHTML = newSection.innerHTML;
            } else {
                location.reload(); // Fallback nếu không tìm thấy
            }
        } catch (error) {
            console.error('Lỗi khi tải lại danh sách phòng:', error);
            location.reload(); // Fallback nếu có lỗi
        }
    }

    // === HÀM XÓA PHÒNG (ĐÃ SỬA) ===
    async function deletePhong(id) {
        if (!confirm("Bạn có chắc muốn xóa phòng này không?")) return;

        // Lấy token từ form "Thêm" (vì nó luôn có trên trang)
        const tokenInput = document.querySelector('#createPhongForm input[name="__RequestVerificationToken"]');
        if (!tokenInput) {
            alert("Lỗi bảo mật: Không tìm thấy Token.");
            return;
        }

        const res = await fetch(`/QuanLy/Phong/Delete?id=${id}`, {
            method: 'POST',
            headers: {
                'RequestVerificationToken': tokenInput.value
            }
        });

        const result = await res.json();
        alert(result.message);
        if (result.success) {
            await reloadRoomSection(); // <-- Đã SỬA
        }
    }

    // === HÀM THÊM PHÒNG (TỪ CREATE.CSHTML) ===
    document.getElementById("createPhongForm").addEventListener("submit", async function (e) {
        e.preventDefault();
        const formData = new FormData(this);
        const token = this.querySelector('input[name="__RequestVerificationToken"]').value;

        const response = await fetch('/QuanLy/Phong/Create', {
            method: 'POST',
            body: formData,
            headers: {
                'RequestVerificationToken': token
            }
        });

        const result = await response.json();
        alert(result.message);
        if (result.success) {
            closeModal('roomModal'); // Đóng modal
            await reloadRoomSection(); // <-- Đã SỬA
        }
    });

    // === HÀM MỞ MODAL SỬA (TỪ EDIT.CSHTML) ===
    async function openPhongEditModal(maPhong) {
        try {
            const res = await fetch(`/QuanLy/Phong/GetPhong?id=${maPhong}`);
            const result = await res.json();

            if (result.success) {
                const data = result.data;
                const form = document.getElementById("editPhongForm");

                form.MaPhong.value = data.maPhong;
                form.TenPhong.value = data.tenPhong;
                form.GiaPhong.value = data.giaPhong;
                form.TrangThai.value = data.trangThai;
                form.Tang.value = data.tang;
                form.LoaiPhong.value = data.loaiPhong;
                form.DienTich.value = data.dienTich;
                form.DiaChi.value = data.diaChi;
                form.MoTa.value = data.moTa;

                openModal('roomEditModal');
            } else {
                alert(result.message);
            }
        } catch (error) {
            alert("Lỗi khi tải dữ liệu phòng: " + error.message);
        }
    }

    // === HÀM SỬA PHÒNG (TỪ EDIT.CSHTML) ===
    document.getElementById("editPhongForm").addEventListener("submit", async function (e) {
        e.preventDefault();
        const formData = new FormData(this);
        const token = this.querySelector('input[name="__RequestVerificationToken"]').value;

        const response = await fetch('/QuanLy/Phong/Edit', {
            method: 'POST',
            body: formData,
            headers: {
                'RequestVerificationToken': token
            }
        });

        const result = await response.json();
        alert(result.message);
        if (result.success) {
            closeModal('roomEditModal'); // Đóng modal
            await reloadRoomSection(); // <-- Đã SỬA
        }
    });
 </script>
